1. 파일 생성 yaml (# touch 명령으로 파일 생성과 동일)
  - # vi ~/playbook/touch.yaml
    ---
    - hosts: all
      tasks:
      - name: Create file
        file:
          path: /root/test_file
          state: touch
          
  [확인]
  - [root@test1 ~]# ls -al /root/
    total 44
    -rw-r--r--   1 root root   16 Nov 10 21:42 test_file

          
2. 파일 작성 yaml (# vi or # echo >> 로 내용 작성과 동일) 
  - # vi ~/playbook/create_file.yaml
    ---
    - hosts: all
      tasks:
      - name: Wirte test_file
        copy:
          dest: "/root/test_file"
          content: |
            hello
            test_file
     
  [확인]
  - [root@test1 ~]# cat /root/test_file
    hello
    test_file
            
3. repository 파일 작성 및 삭제 yaml (task를 나누어 작성하여야 여러개 작성 가능, 나누지 않을 경우 마지막 repo 내용만 작성)
  - # vi ~/playbook/repository_config.yaml
    ---
    - hosts: all
      tasks:
      - name: create local repository
        yum_repository:
          name: local
          file: local
          description: local
          baseurl: file:///mnt
          gpgcheck: no
          enabled: yes

      - name: create local-HA repository
        yum_repository:
          name: local-HA
          file: local
          description: local-HA
          baseurl: file:///mnt/addons/HighAvailibility
          gpgcheck: no
          enabled: yes
  - yum_repository
    * name - repository ID
    * file - repository file name (/etc/yum.repos.d/[name].repo, .repo 확장자를 제외한 이름만 작성)
    * description - repository name (해당 내용이 작성되어 있지 않을 경우 오류 발생, 무조건 작성)
    
  [확인]
  - [root@test1 ~]# cat /etc/yum.repos.d/local.repo
    [local]
    baseurl = file:///mnt
    enabled = 1
    gpgcheck = 0
    name = local

    [local-HA]
    baseurl = file:///mnt/addons/HighAvailibility
    enabled = 1
    gpgcheck = 0
    name = local-HA
        
4. yum 패키지 설치
  - # vi ~/playbook/pkg_install.yaml
    ---
    - hosts: all
      tasks:
      - name: Install pacemaker package
        yum:
          name: ["pkg_name" or "@group_name"]
          state: latest
  - state
    * installed - 지정된 패키지 설치 유무 확인
    * present - 지정된 패키지 설치 유무 확인
    * latest - 지정된 패키지가 최시버전이 아닐 경우 업데이트 진행
    * absent - 패키지 삭제
    * removed - 패키지 삭제
    
참조
  - https://docs.ansible.com/ansible/2.9/user_guide/intro_inventory.html (Ansible DOC)
  - https://www.mydailytutorials.com/ansible-create-files/ (1, 2)
  - https://docs.ansible.com/ansible/2.9/modules/yum_repository_module.html#yum-repository-module (3)
  - https://docs.ansible.com/ansible/2.9/modules/yum_module.html#yum-module (4)
